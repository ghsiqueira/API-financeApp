const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const crypto = require('crypto')
const User = require('../models/User')
const Category = require('../models/Category')
const transporter = require('../config/mailer')
const { validationResult } = require('express-validator')

// Gerar token JWT
const generateToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, { 
    expiresIn: process.env.JWT_EXPIRES_IN || '7d' 
  })
}

// Gerar refresh token
const generateRefreshToken = () => {
  return crypto.randomBytes(32).toString('hex')
}

// Gerar c√≥digo de reset de senha
const generateResetCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

/**
 * Registrar novo usu√°rio
 */
exports.register = async (req, res) => {
  console.log('üöÄ POST /auth/register')
  
  try {
    // Validar dados de entrada
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      console.log('‚ùå Dados inv√°lidos:', errors.array())
      return res.status(400).json({ 
        success: false,
        error: 'Dados inv√°lidos', 
        detalhes: errors.array().map(err => ({
          field: err.param,
          message: err.msg
        }))
      })
    }

    const { nome, email, senha } = req.body
    console.log('üìù Dados recebidos:', { nome, email, senha: '***' })

    // Verificar se email j√° existe
    const existing = await User.findOne({ email: email.toLowerCase() })
    if (existing) {
      console.log('‚ùå Email j√° existe:', email)
      return res.status(400).json({ 
        success: false,
        error: 'Email j√° est√° em uso' 
      })
    }

    // Hash da senha
    const senhaHash = await bcrypt.hash(senha, 12)
    console.log('üîê Senha hasheada')

    // Criar usu√°rio
    const user = await User.create({ 
      nome: nome.trim(), 
      email: email.toLowerCase().trim(), 
      senhaHash 
    })
    console.log('‚úÖ Usu√°rio criado:', user._id)

    // Criar categorias padr√£o para o usu√°rio (async para n√£o travar)
    try {
      await Category.criarCategoriasPadrao(user._id)
      console.log('‚úÖ Categorias padr√£o criadas')
    } catch (err) {
      console.error('‚ö†Ô∏è Erro ao criar categorias padr√£o:', err.message)
    }

    // Gerar tokens
    const token = generateToken(user._id)
    const refreshToken = generateRefreshToken()
    console.log('üé´ Tokens gerados')

    // Atualizar √∫ltimo login
    user.ultimoLogin = new Date()
    await user.save()

    res.status(201).json({ 
      success: true,
      message: 'Usu√°rio criado com sucesso',
      data: {
        token, 
        refreshToken,
        user: user.toSafeObject()
      }
    })

  } catch (err) {
    console.error('‚ùå Erro no registro:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}

/**
 * Fazer login
 */
exports.login = async (req, res) => {
  console.log('üöÄ POST /auth/login')
  
  try {
    // Validar dados de entrada
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      console.log('‚ùå Dados inv√°lidos:', errors.array())
      return res.status(400).json({ 
        success: false,
        error: 'Dados inv√°lidos', 
        detalhes: errors.array().map(err => ({
          field: err.param,
          message: err.msg
        }))
      })
    }

    const { email, senha } = req.body
    console.log('üìù Tentativa de login:', email)

    // Buscar usu√°rio
    const user = await User.findOne({ email: email.toLowerCase() })
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado:', email)
      return res.status(400).json({ 
        success: false,
        error: 'Credenciais inv√°lidas' 
      })
    }

    // Verificar senha
    const match = await bcrypt.compare(senha, user.senhaHash)
    if (!match) {
      console.log('‚ùå Senha incorreta para:', email)
      return res.status(400).json({ 
        success: false,
        error: 'Credenciais inv√°lidas' 
      })
    }

    // Gerar tokens
    const token = generateToken(user._id)
    const refreshToken = generateRefreshToken()
    console.log('üé´ Login bem-sucedido:', user._id)

    // Atualizar √∫ltimo login
    user.ultimoLogin = new Date()
    await user.save()

    res.json({ 
      success: true,
      message: 'Login realizado com sucesso',
      data: {
        token, 
        refreshToken,
        user: user.toSafeObject()
      }
    })

  } catch (err) {
    console.error('‚ùå Erro no login:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}

/**
 * Solicitar c√≥digo de recupera√ß√£o de senha
 */
exports.forgotPassword = async (req, res) => {
  console.log('üöÄ POST /auth/forgot-password')
  
  try {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({ 
        success: false,
        error: 'Dados inv√°lidos', 
        detalhes: errors.array().map(err => ({
          field: err.param,
          message: err.msg
        }))
      })
    }

    const { email } = req.body
    console.log('üìß Solicita√ß√£o de reset para:', email)

    // Buscar usu√°rio
    const user = await User.findOne({ email: email.toLowerCase() })
    if (!user) {
      console.log('‚ùå Email n√£o encontrado:', email)
      return res.status(400).json({ 
        success: false,
        error: 'Email n√£o encontrado' 
      })
    }

    // Gerar c√≥digo de reset
    const resetCode = generateResetCode()
    const resetExpires = new Date(Date.now() + 10 * 60 * 1000) // 10 minutos

    // Salvar c√≥digo no usu√°rio
    user.codigoResetSenha = resetCode
    user.resetSenhaExpira = resetExpires
    await user.save()

    // Enviar email
    try {
      await transporter.sendMail({
        from: process.env.MAIL_FROM_ADDRESS,
        to: user.email,
        subject: 'C√≥digo de Recupera√ß√£o de Senha - Finance App',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #1a1a2e;">Recupera√ß√£o de Senha</h2>
            <p>Ol√°, ${user.nome}!</p>
            <p>Voc√™ solicitou a recupera√ß√£o de sua senha. Use o c√≥digo abaixo no aplicativo:</p>
            <div style="background: #f5f5f5; padding: 20px; text-align: center; margin: 20px 0; border-radius: 8px;">
              <h1 style="color: #1a1a2e; margin: 0; letter-spacing: 4px;">${resetCode}</h1>
            </div>
            <p><strong>Este c√≥digo √© v√°lido por 10 minutos.</strong></p>
            <p>Se voc√™ n√£o solicitou esta recupera√ß√£o, ignore este email.</p>
            <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
            <p style="color: #666; font-size: 12px;">Finance App - Seu gestor financeiro pessoal</p>
          </div>
        `
      })
      console.log('‚úÖ Email de reset enviado para:', email)
    } catch (emailErr) {
      console.error('‚ùå Erro ao enviar email:', emailErr)
      return res.status(500).json({ 
        success: false,
        error: 'Erro ao enviar email' 
      })
    }

    res.json({ 
      success: true,
      message: 'C√≥digo de recupera√ß√£o enviado por email' 
    })

  } catch (err) {
    console.error('‚ùå Erro no forgot password:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}

/**
 * Redefinir senha com c√≥digo
 */
exports.resetPassword = async (req, res) => {
  console.log('üöÄ POST /auth/reset-password')
  
  try {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({ 
        success: false,
        error: 'Dados inv√°lidos', 
        detalhes: errors.array().map(err => ({
          field: err.param,
          message: err.msg
        }))
      })
    }

    const { email, code, novaSenha } = req.body
    console.log('üîê Reset de senha para:', email)

    // Buscar usu√°rio
    const user = await User.findOne({ 
      email: email.toLowerCase(),
      codigoResetSenha: code,
      resetSenhaExpira: { $gt: new Date() }
    })

    if (!user) {
      console.log('‚ùå C√≥digo inv√°lido ou expirado')
      return res.status(400).json({ 
        success: false,
        error: 'C√≥digo inv√°lido ou expirado' 
      })
    }

    // Hash da nova senha
    const senhaHash = await bcrypt.hash(novaSenha, 12)

    // Atualizar senha e limpar c√≥digo de reset
    user.senhaHash = senhaHash
    user.codigoResetSenha = null
    user.resetSenhaExpira = null
    await user.save()

    console.log('‚úÖ Senha redefinida para:', email)

    res.json({ 
      success: true,
      message: 'Senha redefinida com sucesso' 
    })

  } catch (err) {
    console.error('‚ùå Erro no reset password:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}

/**
 * Renovar token de acesso
 */
exports.refreshToken = async (req, res) => {
  console.log('üöÄ POST /auth/refresh-token')
  
  try {
    const { refreshToken, userId } = req.body

    if (!refreshToken || !userId) {
      return res.status(400).json({ 
        success: false,
        error: 'Refresh token e userId s√£o obrigat√≥rios' 
      })
    }

    // Verificar se usu√°rio existe
    const user = await User.findById(userId)
    if (!user) {
      return res.status(401).json({ 
        success: false,
        error: 'Usu√°rio n√£o encontrado' 
      })
    }

    // Gerar novos tokens
    const newToken = generateToken(user._id)
    const newRefreshToken = generateRefreshToken()

    console.log('üé´ Tokens renovados para:', user.email)

    res.json({ 
      success: true,
      data: {
        token: newToken,
        refreshToken: newRefreshToken
      }
    })

  } catch (err) {
    console.error('‚ùå Erro no refresh token:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}

/**
 * Verificar email do usu√°rio
 */
exports.verifyEmail = async (req, res) => {
  console.log('üöÄ GET /auth/verify-email/:token')
  
  try {
    const { token } = req.params

    // Verificar token (implementar l√≥gica conforme necess√°rio)
    // Por enquanto, apenas um placeholder
    
    res.json({ 
      success: true,
      message: 'Email verificado com sucesso' 
    })

  } catch (err) {
    console.error('‚ùå Erro na verifica√ß√£o de email:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}

/**
 * Fazer logout
 */
exports.logout = async (req, res) => {
  console.log('üöÄ POST /auth/logout')
  
  try {
    // Aqui voc√™ pode implementar blacklist de tokens se necess√°rio
    console.log('‚úÖ Logout realizado para usu√°rio:', req.userId)

    res.json({ 
      success: true,
      message: 'Logout realizado com sucesso' 
    })

  } catch (err) {
    console.error('‚ùå Erro no logout:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}

/**
 * Validar token atual
 */
exports.validateToken = async (req, res) => {
  console.log('üöÄ GET /auth/validate-token')
  
  try {
    // O middleware de auth j√° validou o token e adicionou req.user
    res.json({ 
      success: true,
      data: {
        user: req.user.toSafeObject()
      }
    })

  } catch (err) {
    console.error('‚ùå Erro na valida√ß√£o do token:', err)
    res.status(500).json({ 
      success: false,
      error: 'Erro interno do servidor' 
    })
  }
}