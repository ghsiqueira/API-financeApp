// routes/auth.js - Completo
const express = require('express')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const { body, validationResult } = require('express-validator')
const router = express.Router()

// Mock de usu치rios (em produ칞칚o seria um modelo do MongoDB)
let users = [
  {
    _id: '1',
    nome: 'Gabriel',
    email: 'admin@financeapp.com',
    senhaHash: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj1VpJUjJC3a', // senha: admin123
    emailVerificado: true,
    criadoEm: new Date(),
    configuracoes: {
      tema: 'escuro',
      moeda: 'BRL',
      notificacoes: {
        email: true,
        push: true,
        orcamento: true,
        metas: true
      }
    }
  }
]

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *         nome:
 *           type: string
 *         email:
 *           type: string
 *         emailVerificado:
 *           type: boolean
 *         configuracoes:
 *           type: object
 *     LoginRequest:
 *       type: object
 *       required:
 *         - email
 *         - senha
 *       properties:
 *         email:
 *           type: string
 *           format: email
 *         senha:
 *           type: string
 *           minLength: 6
 *     RegisterRequest:
 *       type: object
 *       required:
 *         - nome
 *         - email
 *         - senha
 *       properties:
 *         nome:
 *           type: string
 *           minLength: 2
 *         email:
 *           type: string
 *           format: email
 *         senha:
 *           type: string
 *           minLength: 6
 */

// Valida칞칫es
const loginValidation = [
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email inv치lido'),
  body('senha')
    .isLength({ min: 6 })
    .withMessage('Senha deve ter pelo menos 6 caracteres')
]

const registerValidation = [
  body('nome')
    .trim()
    .isLength({ min: 2, max: 50 })
    .withMessage('Nome deve ter entre 2 e 50 caracteres'),
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email inv치lido'),
  body('senha')
    .isLength({ min: 6 })
    .withMessage('Senha deve ter pelo menos 6 caracteres')
]

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Fazer login
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/LoginRequest'
 *     responses:
 *       200:
 *         description: Login realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 token:
 *                   type: string
 *                 user:
 *                   $ref: '#/components/schemas/User'
 *       400:
 *         description: Dados inv치lidos
 *       401:
 *         description: Credenciais inv치lidas
 */
router.post('/login', loginValidation, async (req, res) => {
  try {
    // Verificar erros de valida칞칚o
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Dados inv치lidos',
        details: errors.array()
      })
    }

    const { email, senha } = req.body

    // Buscar usu치rio
    const user = users.find(u => u.email === email)
    if (!user) {
      return res.status(401).json({
        success: false,
        error: 'Email ou senha incorretos'
      })
    }

    // Verificar senha
    const senhaValida = await bcrypt.compare(senha, user.senhaHash)
    if (!senhaValida) {
      return res.status(401).json({
        success: false,
        error: 'Email ou senha incorretos'
      })
    }

    // Gerar token JWT
    const token = jwt.sign(
      { 
        userId: user._id,
        email: user.email 
      },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
    )

    // Remover senha da resposta
    const { senhaHash, ...userResponse } = user

    res.json({
      success: true,
      message: 'Login realizado com sucesso',
      token,
      user: userResponse
    })

  } catch (error) {
    console.error('Erro no login:', error)
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor'
    })
  }
})

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Registrar novo usu치rio
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RegisterRequest'
 *     responses:
 *       201:
 *         description: Usu치rio criado com sucesso
 *       400:
 *         description: Dados inv치lidos ou email j치 existe
 */
router.post('/register', registerValidation, async (req, res) => {
  try {
    // Verificar erros de valida칞칚o
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Dados inv치lidos',
        details: errors.array()
      })
    }

    const { nome, email, senha } = req.body

    // Verificar se email j치 existe
    const userExists = users.find(u => u.email === email)
    if (userExists) {
      return res.status(400).json({
        success: false,
        error: 'Email j치 est치 em uso'
      })
    }

    // Hash da senha
    const senhaHash = await bcrypt.hash(senha, 12)

    // Criar novo usu치rio
    const newUser = {
      _id: (Date.now() + Math.random()).toString(),
      nome: nome.trim(),
      email: email.toLowerCase(),
      senhaHash,
      emailVerificado: false, // Em produ칞칚o, seria false at칠 verificar
      criadoEm: new Date(),
      configuracoes: {
        tema: 'escuro',
        moeda: 'BRL',
        notificacoes: {
          email: true,
          push: true,
          orcamento: true,
          metas: true
        }
      }
    }

    users.push(newUser)

    // Gerar token
    const token = jwt.sign(
      { 
        userId: newUser._id,
        email: newUser.email 
      },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
    )

    // Remover senha da resposta
    const { senhaHash: _, ...userResponse } = newUser

    res.status(201).json({
      success: true,
      message: 'Usu치rio criado com sucesso',
      token,
      user: userResponse
    })

  } catch (error) {
    console.error('Erro no registro:', error)
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor'
    })
  }
})

/**
 * @swagger
 * /api/auth/forgot-password:
 *   post:
 *     summary: Solicitar reset de senha
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *     responses:
 *       200:
 *         description: Email de reset enviado
 *       404:
 *         description: Email n칚o encontrado
 */
router.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body

    if (!email) {
      return res.status(400).json({
        success: false,
        error: 'Email 칠 obrigat칩rio'
      })
    }

    // Buscar usu치rio
    const user = users.find(u => u.email === email.toLowerCase())
    if (!user) {
      // Por seguran칞a, n칚o revelar se o email existe ou n칚o
      return res.json({
        success: true,
        message: 'Se o email existir, voc칡 receber치 as instru칞칫es para resetar a senha'
      })
    }

    // Gerar c칩digo de 4 d칤gitos
    const resetCode = Math.floor(1000 + Math.random() * 9000).toString()
    
    // Em produ칞칚o, salvaria o c칩digo no banco e enviaria por email
    console.log(`游댐 C칩digo de reset para ${email}: ${resetCode}`)

    // Por enquanto, retornar o c칩digo na resposta (s칩 para desenvolvimento)
    res.json({
      success: true,
      message: 'C칩digo de reset enviado para seu email',
      ...(process.env.NODE_ENV === 'development' && { resetCode }) // S칩 mostrar em dev
    })

  } catch (error) {
    console.error('Erro no forgot password:', error)
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor'
    })
  }
})

/**
 * @swagger
 * /api/auth/reset-password:
 *   post:
 *     summary: Resetar senha com c칩digo
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - codigo
 *               - novaSenha
 *             properties:
 *               email:
 *                 type: string
 *               codigo:
 *                 type: string
 *               novaSenha:
 *                 type: string
 *     responses:
 *       200:
 *         description: Senha alterada com sucesso
 *       400:
 *         description: C칩digo inv치lido
 */
router.post('/reset-password', async (req, res) => {
  try {
    const { email, codigo, novaSenha } = req.body

    if (!email || !codigo || !novaSenha) {
      return res.status(400).json({
        success: false,
        error: 'Email, c칩digo e nova senha s칚o obrigat칩rios'
      })
    }

    if (novaSenha.length < 6) {
      return res.status(400).json({
        success: false,
        error: 'Nova senha deve ter pelo menos 6 caracteres'
      })
    }

    // Buscar usu치rio
    const userIndex = users.findIndex(u => u.email === email.toLowerCase())
    if (userIndex === -1) {
      return res.status(400).json({
        success: false,
        error: 'C칩digo inv치lido'
      })
    }

    // Em produ칞칚o, verificaria o c칩digo salvo no banco
    // Por enquanto, aceitar qualquer c칩digo de 4 d칤gitos
    if (!/^\d{4}$/.test(codigo)) {
      return res.status(400).json({
        success: false,
        error: 'C칩digo deve ter 4 d칤gitos'
      })
    }

    // Hash da nova senha
    const novaSenhaHash = await bcrypt.hash(novaSenha, 12)

    // Atualizar senha
    users[userIndex].senhaHash = novaSenhaHash

    res.json({
      success: true,
      message: 'Senha alterada com sucesso'
    })

  } catch (error) {
    console.error('Erro no reset password:', error)
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor'
    })
  }
})

/**
 * @swagger
 * /api/auth/verify-token:
 *   get:
 *     summary: Verificar se token 칠 v치lido
 *     tags: [Auth]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Token v치lido
 *       401:
 *         description: Token inv치lido
 */
router.get('/verify-token', (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '')

    if (!token) {
      return res.status(401).json({
        success: false,
        error: 'Token n칚o fornecido'
      })
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET)
    const user = users.find(u => u._id === decoded.userId)

    if (!user) {
      return res.status(401).json({
        success: false,
        error: 'Usu치rio n칚o encontrado'
      })
    }

    const { senhaHash, ...userResponse } = user

    res.json({
      success: true,
      message: 'Token v치lido',
      user: userResponse
    })

  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        error: 'Token expirado'
      })
    }

    return res.status(401).json({
      success: false,
      error: 'Token inv치lido'
    })
  }
})

// Rota de teste
router.get('/test', (req, res) => {
  res.json({
    message: 'Rota de autentica칞칚o funcionando!',
    endpoints: [
      'POST /api/auth/login',
      'POST /api/auth/register', 
      'POST /api/auth/forgot-password',
      'POST /api/auth/reset-password',
      'GET /api/auth/verify-token'
    ],
    usuariosTeste: [
      {
        email: 'admin@financeapp.com',
        senha: 'admin123'
      }
    ]
  })
})

module.exports = router